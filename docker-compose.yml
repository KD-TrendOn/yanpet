version: "3.9"
services:
  api_service:
    build: ./api_service
    ports:
      - "8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest@rabbitmq//
    networks:
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  worker_service:
    build: ./worker_service
    depends_on:
      - db
      - rabbitmq
      - llm_service
    environment:
      - CELERY_BROKER_URL=amqp://guest@rabbitmq//
    networks:
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  llm_service:
    build: ./llm_service
    depends_on:
      - vllm_service
    environment:
      - VLLM_BASE_URL=http://vllm_service:8000
      - VLLM_API_KEY=token-abc123
    networks:
      - backend

  vllm_service:
    image: vllm/vllm-openai:latest
    runtime: nvidia
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    environment:
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
    command: >
      --model Qwen/Qwen2.5-3B-Instruct
      --dtype half
      --api-key token-abc123
    shm_size: '1gb'
    ipc: host
    ports:
      - "8000:8000"
    networks:
      - backend

  nginx:
    build: ./nginx
    ports:
      - "8080:80"
    depends_on:
      - api_service
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
    networks:
      - backend

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:6
    networks:
      - backend

volumes:
  db_data:

networks:
  backend:
    driver: bridge